/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package i.shatalov.teamproject.database;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.sql.*;

public class useDB implements DataBaseHandler {
  //JDBC driver name and database URL
  static final String JDBC_DRIVER = "org.sqlite.JDBC";
  static final String DB_URL = "jdbc:sqlite:sqlite/db/robots";
  static Connection conn = null;

  public static void connect() throws ClassNotFoundException {
    Class.forName(JDBC_DRIVER);
    try {
      conn = DriverManager.getConnection(DB_URL);
    } catch (SQLException e) {
      e.printStackTrace();
    }
  }

  public void savePlayer(PlayerClass playerClass) throws ClassNotFoundException {
    connect();
    try {
      Statement stmt = conn.createStatement();
      String sql = "SELECT login FROM users";
      ResultSet resultSet = stmt.executeQuery(sql);
      String ifCheck;
      while (resultSet.next()) {
        ifCheck = resultSet.getString("LogName");
        if (ifCheck.equals(playerClass.getName())) {
          System.out.println("Record with given id already exist");
          return;
        }
      }

      //Creating statement for DataBase tpo insert new record (new user)
      System.out.println("Inserting given records in the table...");
      stmt = conn.createStatement();
      sql = "INSERT INTO users " +
          "VALUES ('" + playerClass.getName() +
          "', '" + playerClass.getPass() + "', '" + playerClass.getAcc() + "' )";
      stmt.executeUpdate(sql);
      System.out.println("Records inserted.");
    } catch (Exception se) {
      //Handle errors for JDBC
      se.printStackTrace();
    } finally {
      //finally block used to close resources
      try {
        if (conn != null)
          conn.close();
      } catch (SQLException se) {
        se.printStackTrace();
      }//end finally try
    }//end try
    System.out.println("--END--");
  }

  public PlayerClass getPlayerByName(String name) throws ClassNotFoundException {
    connect();
    Statement stmt;
    PlayerClass playerClass = null;
    try {

      stmt = conn.createStatement();
      String sql = "SELECT password FROM users WHERE login = '" + name + "'";
      ResultSet resultSet = stmt.executeQuery(sql);

      String Ppass = null;
      String Pacc = null;
      String Pname;
      while (resultSet.next()) {
        Ppass = resultSet.getString("password");
      }
      stmt = conn.createStatement();
      sql = "SELECT type FROM users WHERE login = '" + name + "'";
      resultSet = stmt.executeQuery(sql);
      while (resultSet.next()) {
        Pacc = resultSet.getString("type");
      }
      Pname = name;
      playerClass = new PlayerClass(Pname, Ppass, Pacc);

    } catch (SQLException e) {
      e.printStackTrace();
    } finally {
      try {
        if (conn != null) {
          conn.close();
        }
      } catch (SQLException e) {
        e.printStackTrace();
      }
    }
    System.out.println("--END--");
    return playerClass;
  }

  //-- Interact with levels.

  public void saveLevel(LevelClass levelClass) throws ClassNotFoundException {
    connect();
    try {
      //Register JDBC driver
      Class.forName(JDBC_DRIVER);
      //Open a connection
      System.out.println("Connecting to a selected database...");
      conn = DriverManager.getConnection(DB_URL);
      System.out.println("Connected database successfully.");

      InputStream inputStream = new FileInputStream(new File(levelClass.path));
      String sql = "INSERT INTO levels " +
          "(file, description, difficulty, playersMax) values (?, ?, ?, ?)";
      PreparedStatement statement = conn.prepareStatement(sql);
      statement.setBlob(1, inputStream);
      statement.setString(2, levelClass.description);
      statement.setString(3, levelClass.description);
      statement.setInt(4, levelClass.playersMax);
      statement.executeUpdate();

    } catch (ClassNotFoundException | FileNotFoundException | SQLException e) {
      e.printStackTrace();
    } finally {
      try {
        if (conn != null) {
          conn.close();
        }
      } catch (SQLException e) {
        e.printStackTrace();
      }
    }
  }
}
