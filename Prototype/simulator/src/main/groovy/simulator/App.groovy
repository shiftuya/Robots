/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */

package simulator

import com.sun.net.httpserver.HttpServer
import groovy.transform.CompileStatic
import groovy.transform.Synchronized

import java.util.concurrent.Executors

class App {

    static int PORT = 1337
    static long sim_count = 0

    @Synchronized
    static long modify(long dif){
        sim_count+=dif
        return sim_count
    }

    @CompileStatic
    static void main(String[] args) {
        long id_next = 0
        HttpServer.create(new InetSocketAddress(PORT), 0).with {
            println "Server is listening on ${PORT}, hit Ctrl+C to exit."
            createContext("/simulate") { http ->
                modify(+1)
                try {

                    http.responseHeaders.add("Content-type", "text/plain")
                    if (http.requestMethod != "POST") {
                        println "Wrong method"
                        http.sendResponseHeaders(404, 0)
                        http.close()
                        return
                    }
                    http.sendResponseHeaders(200, 0)

                    Task task = new UnsecureTask("${http.requestBody}")
                    String result = task.run()
                    //println(result)
                    http.responseBody.withWriter { out ->
                        out << result + "\n"
                    }
                    http.close()
                } catch (Exception e) {
                    println "Exception when processing solution"
                    println(e)
                    http.sendResponseHeaders(500, 0)
                    http.responseBody.withWriter { out ->
                        out << "error: " + e
                    }
                    http.close()

                }
                modify(-1)
            }
            createContext("/test") { http ->
                http.sendResponseHeaders(200, 0)
                http.responseBody.withWriter { out ->
                    out << "{\"status\":\"online\", \"sim_count\": "+modify(0)+"}"
                }
                http.close()
            }
            setExecutor(Executors.newCachedThreadPool())
            start()
        }
    }
}
